{"version":3,"sources":["images/operator.png","images/scores.js","components/AutoCompleteText.js","images/categories.js","components/JokeResults.jsx","App.jsx","serviceWorker.js","components/SampleFetch.jsx","index.js"],"names":["module","exports","React","Component","split","JokeResults","jokes","length","Fragment","map","joke","className","text","score","categories","App","props","handleChange","e","name","value","setState","state","isLoaded","cat_options","category","search","handleSubmit","bind","URLParams","URLSearchParams","this","location","axios","all","method","url","params","then","spread","response1","response2","data","catch","err","console","log","event","preventDefault","FormData","target","append","forEach","cat","response","categoryList","key","scoreList","scores","Container","Row","Col","src","logo","alt","Form","onSubmit","Input","placeholder","label","type","onChange","Dropdown","multiple","selection","options","class","Boolean","window","hostname","match","ReactDOM","render","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,sC,wSCA5B,G,4BCG+BC,IAAMC,UCHrC,2fA+CNC,MAAM,MF/CA,gBAIZA,MAAM,O,kCG2BMC,EA3BK,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACrB,OAAoB,GAAhBA,EAAMC,OAEN,kBAAC,IAAMC,SAAP,MAMF,kBAAC,IAAMA,SAAP,KACE,gCAAQ,sCACPF,EAAMG,KAAI,SAACC,GAAD,OACT,6BACA,yBAAKC,UAAU,QACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAcD,EAAK,GAAGE,MACpC,wBAAID,UAAU,iCAAiCD,EAAK,GAAGG,OACvD,uBAAGF,UAAU,aAAaD,EAAK,GAAGI,cAGtC,mCC6IOC,E,kDAjJb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAsCRC,aAAe,SAACC,EAAD,OAAMC,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,MAAZ,OAAwB,EAAKC,SAAL,eAAiBF,EAAOC,KArC7D,EAAKE,MAAQ,CACXC,UAAU,EACVjB,MAAO,GACPkB,YAAa,GAEbC,SAAU,GACVZ,MAAO,GACPa,OAAQ,IACV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAVH,E,gEAaE,IAAD,OACZC,EAAY,IAAIC,gBAAgBC,KAAKf,MAAMgB,SAASN,QAE1DO,IAAMC,IAAI,CACRD,IAAM,CACJE,OAAQ,MACRC,IAAI,mCACJC,OAAQR,IAEVI,IAAM,CACJE,OAAQ,MACRC,IAAI,4CAGLE,KAAKL,IAAMM,QAAO,SAACC,EAAWC,GAC7B,EAAKpB,SAAS,CACZE,UAAS,EACTjB,MAAOkC,EAAUE,KAAKpC,MACtBkB,YAAaiB,EAAUC,KAAK5B,iBAG/B6B,OAAM,SAAAC,GAAG,OACRC,QAAQC,IAAIF,Q,mCAMLG,GAAQ,IAAD,OAClBA,EAAMC,iBADY,MAGiBjB,KAAKT,MAAhCI,EAHU,EAGVA,OAAQD,EAHE,EAGFA,SAAUZ,EAHR,EAGQA,MAEpBwB,GADO,IAAIY,SAASF,EAAMG,QACjB,IAAIpB,iBACnBe,QAAQC,IAAIf,KAAKT,OACjBe,EAAOc,OAAO,SAAUzB,GAExBD,EAAS2B,SAAQ,SAAAC,GACfhB,EAAOc,OAAO,WAAYE,MAG5BhB,EAAOc,OAAO,QAAStC,GAGvBoB,IAAM,CACJE,OAAQ,MACRC,IAAI,mCACJC,OAAQA,IAETC,MAAM,SAAAgB,GACL,EAAKjC,SAAS,CACZf,MAAOgD,EAASZ,KAAKpC,WAGxBqC,OAAM,SAAAC,GAAG,OACRC,QAAQC,IAAIF,Q,+BAKd,IAAMW,EAAexB,KAAKT,MAAME,YAAYf,KAAI,SAAC4C,GAAD,MAC3C,CAACG,IAAKH,EACPzC,KAAMyC,EACNjC,MAAOiC,MAGLI,EAAYC,EAAOjD,KAAI,SAACI,GAAD,MAC1B,CAAC2C,IAAK3C,EACPD,KAAMC,EACNO,MAAOP,MAGT,OACE,kBAAC8C,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKjD,UAAU,6BACb,kBAACkD,EAAA,EAAD,KACE,4BAAQlD,UAAU,cAChB,2CACA,yBAAKmD,IAAKC,IAAMpD,UAAU,WAAWqD,IAAI,UAG3C,kBAACC,EAAA,EAAD,CAAMC,SAAUnC,KAAKJ,cACnB,kBAACsC,EAAA,EAAKE,MAAN,CACEC,YAAY,SACZjD,KAAK,SACLkD,MAAQ,WACRC,KAAO,OACPC,SAAUxC,KAAKd,eAEjB,kBAACgD,EAAA,EAAKO,SAAN,CACEJ,YAAc,oBACdjD,KAAO,WACPkD,MAAQ,aACRI,UAAQ,EACR/C,QAAM,EACNgD,WAAS,EACTC,QAAWpB,EACXgB,SAAUxC,KAAKd,eAGjB,kBAACgD,EAAA,EAAKO,SAAN,CACEJ,YAAY,uBACZjD,KAAK,QACLkD,MAAM,gBACNK,WAAS,EACTC,QAASlB,EACTc,SAAUxC,KAAKd,eAGjB,4BAAQ2D,MAAM,YAAYN,KAAK,UAA/B,SAKN,kBAACV,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKlD,UAAU,aACb,kBAAC,EAAD,CAAaL,MAAOyB,KAAKT,MAAMhB,e,GAlIzBJ,IAAMC,WCPJ0E,QACW,cAA7BC,OAAO9C,SAAS+C,UAEe,UAA7BD,OAAO9C,SAAS+C,UAEhBD,OAAO9C,SAAS+C,SAASC,MACvB,2D,qBChBoB9E,IAAMC,UCQhC8E,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWrE,MAGbsE,SAASC,eAAe,SFmHtC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdhD,OAAM,SAAAiD,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.d961adf9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/operator.23ba0e19.png\";","export default `1\r\n2\r\n3\r\n4\r\n5`.split('\\n');","import React from 'react';\r\nimport '../css/AutoCompleteText.css';\r\n\r\nexport default class AutoCompleteText extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            suggestions: [],\r\n            text: '',\r\n        };\r\n    }\r\n\r\n    onTextChanged = (e)=> {\r\n        const { items } = this.props;\r\n        const value = e.target.value;\r\n        let suggestions = [];\r\n        if (value.length > 0) {\r\n            const regex = new RegExp(`^${value}`, 'i');\r\n            suggestions = items.sort().filter(v => regex.test(v));\r\n        }\r\n        this.setState(() => ({suggestions, text: value}));\r\n    }\r\n\r\n    suggestionSelected(value) {\r\n        this.setState(() => ({\r\n            text: value,\r\n            suggestions: [],\r\n        }))\r\n    }\r\n\r\n    renderSuggestions () {\r\n        const {suggestions} = this.state;\r\n        if (suggestions.length === 0) {\r\n            return null;\r\n        }\r\n        return (\r\n            <ul>\r\n                {suggestions.map((item) => <li onClick={() => this.suggestionSelected(item)}>{item}</li>)}\r\n            </ul>\r\n        );\r\n    }\r\n\r\n    render () {\r\n        const { text } = this.state;\r\n        return (\r\n            <div className=\"AutoCompleteText\">\r\n                <input value={text} onChange={this.onTextChanged} type=\"text\" />\r\n                {this.renderSuggestions()}\r\n            </div>\r\n        )\r\n    }\r\n}","export default `Animals\r\nAviation\r\nBar Jokes\r\nBiology\r\nBlind Jokes\r\nBlonde Jokes\r\nBusiness\r\nChemistry\r\nChildren\r\nComputers\r\nCrazy Jokes\r\nDad Jokes\r\nDeep Thoughts\r\nEnglish\r\nEthnic Jokes\r\nFamily, Parents\r\nFarmers\r\nFood Jokes\r\nHeaven and Hell\r\nHolidays\r\nIdiots\r\nInsults\r\nLawyers\r\nLight Bulbs\r\nLove & Romance\r\nMarriage\r\nMedical\r\nMen\r\nMilitary\r\nMoney\r\nMusic\r\nOffice Jokes\r\nOld Age\r\nOne Liners\r\nPhysics\r\nPick-up Line\r\nPolice Jokes\r\nPolitical\r\nPun\r\nRedneck\r\nReligious \r\nSchool\r\nScience\r\nSex\r\nSports\r\nState Jokes\r\nWomen\r\nYo Mama`.split('\\n');","// adapted from: https://pusher.com/tutorials/consume-restful-api-react\r\n\r\nimport React from 'react'\r\n\r\nconst JokeResults = ({ jokes }) => {\r\n  if (jokes.length == 0) {\r\n    return (\r\n      <React.Fragment>\r\n\r\n      </React.Fragment>\r\n    )\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <center><h2>Jokes</h2></center>\r\n      {jokes.map((joke) => (\r\n        <div>\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <h5 className=\"card-title\">{joke[0].text}</h5>\r\n            <h6 className=\"card-subtitle mb-2 text-muted\">{joke[0].score}</h6>\r\n            <p className=\"card-text\">{joke[0].categories}</p>\r\n          </div>\r\n        </div>\r\n        <br></br>\r\n        </div>\r\n      ))}\r\n    </React.Fragment>\r\n  )\r\n};\r\n\r\nexport default JokeResults","import React from 'react';\r\nimport axios from 'axios';\r\nimport logo from './images/operator.png';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport './css/main.css';\r\nimport './css/App.css';\r\nimport AutoCompleteText from './components/AutoCompleteText';\r\nimport categories from './images/categories';\r\nimport scores from './images/scores';\r\n\r\nimport { Button, Checkbox, Form } from 'semantic-ui-react'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Container from 'react-bootstrap/Container'\r\n\r\nimport JokeResults from './components/JokeResults';\r\nimport {CircularProgress} from '@material-ui/core'\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      isLoaded: false,\r\n      jokes: [],\r\n      cat_options: [],\r\n\r\n      category: '',\r\n      score: '',\r\n      search: ''    }\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const URLParams = new URLSearchParams(this.props.location.search)\r\n\r\n    axios.all([\r\n      axios({\r\n        method: 'GET',\r\n        url: `http://localhost:5000/api/search`,\r\n        params: URLParams\r\n      }),\r\n      axios({\r\n        method: 'GET',\r\n        url: `http://localhost:5000/api/cat-options`\r\n      })\r\n    ])\r\n      .then(axios.spread((response1, response2) => {\r\n        this.setState({\r\n          isLoaded:true,\r\n          jokes: response1.data.jokes,\r\n          cat_options: response2.data.categories\r\n        })\r\n      }))\r\n      .catch(err =>\r\n        console.log(err)\r\n      );\r\n  }\r\n\r\n  handleChange = (e, { name, value }) => this.setState({ [name]: value })\r\n  \r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    const { search, category, score} = this.state\r\n    const data = new FormData(event.target);\r\n    const params = new URLSearchParams()\r\n    console.log(this.state)\r\n    params.append(\"search\", search)\r\n    \r\n    category.forEach(cat => {\r\n      params.append(\"category\", cat);\r\n    })\r\n   \r\n    params.append(\"score\", score)\r\n  \r\n\r\n    axios({\r\n      method: 'GET',\r\n      url: `http://localhost:5000/api/search`,\r\n      params: params\r\n    })\r\n    .then (response => {\r\n      this.setState({\r\n        jokes: response.data.jokes\r\n      })\r\n    })\r\n    .catch(err => \r\n      console.log(err));\r\n    \r\n  }\r\n\r\n  render() {\r\n    const categoryList = this.state.cat_options.map((cat) =>\r\n        ({key: cat,\r\n        text: cat,\r\n        value: cat})        \r\n    );\r\n\r\n    const scoreList = scores.map((score) =>\r\n      ({key: score, \r\n      text: score, \r\n      value: score})\r\n    );\r\n\r\n    return (\r\n      <Container>\r\n        <Row className=\"justify-content-md-center\">\r\n          <Col>\r\n            <header className=\"App-header\">\r\n              <h1>HahaFactory</h1>\r\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            </header>\r\n\r\n            <Form onSubmit={this.handleSubmit}>\r\n              <Form.Input\r\n                placeholder=\"Search\"\r\n                name=\"search\"\r\n                label = \"Keywords\" \r\n                type = \"text\"\r\n                onChange={this.handleChange}/>\r\n\r\n              <Form.Dropdown\r\n                placeholder = \"Select Categories\"\r\n                name = \"category\"\r\n                label = \"Categories\"\r\n                multiple\r\n                search\r\n                selection\r\n                options = {categoryList}\r\n                onChange={this.handleChange}\r\n              />\r\n\r\n              <Form.Dropdown\r\n                placeholder=\"Select Minimum Score\"\r\n                name=\"score\"\r\n                label=\"Minimum Score\"\r\n                selection\r\n                options={scoreList}\r\n                onChange={this.handleChange}\r\n              />\r\n\r\n              <button class=\"ui button\" type=\"submit\">Go</button>\r\n            </Form>\r\n\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col className=\"jokes-col\">\r\n            <JokeResults jokes={this.state.jokes} />\r\n          </Col>\r\n        </Row>\r\n      </Container >\r\n\r\n\r\n      )\r\n    //   {\r\n    //   return <div style={{ display: 'flex', position: 'absolute', left: '50%', top: '50%' }}>\r\n    //     <CircularProgress disableShrink />\r\n    //   </div>\r\n    // }\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nclass SampleFetch extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      items: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"http://0.0.0.0:5000/jokes/api\", {\r\n      method: 'GET'\r\n    })\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            items: result.jokes\r\n          });\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      )\r\n      .then(console.log(this.items))\r\n  }\r\n\r\n  render() {\r\n    const { error, isLoaded, items } = this.state;\r\n    if (error) {\r\n      return <div>Error: {error.message}</div>;\r\n    } else if (!isLoaded) {\r\n      return <div>Loading...</div>;\r\n    } else {\r\n      return (\r\n        <ul>\r\n          {items.map(item => (\r\n            <li key={item.score}>\r\n              {item.text} {item.maturity}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default SampleFetch","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport SampleFetch from './components/SampleFetch';\r\n\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <Switch>\r\n      <Route path=\"/\" component={App} />\r\n      {/* <Route path=\"/sample\" component={SampleFetch} /> */}\r\n    </Switch>\r\n  </BrowserRouter>, document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}