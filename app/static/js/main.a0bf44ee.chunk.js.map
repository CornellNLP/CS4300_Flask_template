{"version":3,"sources":["operator.png","components/JokeResults.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","JokeResults","jokes","map","joke","class","text","score","categories","App","props","state","isLoaded","handleSubmit","bind","event","preventDefault","FormData","target","fetch","mode","method","then","res","json","data","setState","error","Container","Row","className","Col","src","logo","alt","Form","onSubmit","this","Group","controlId","Control","type","name","placeholder","required","Button","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,sC,4SCuB5BC,EAjBK,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACrB,OACE,6BACE,gCAAQ,sCACPA,EAAMC,KAAI,SAACC,GAAD,OACT,yBAAKC,MAAM,QACT,yBAAKA,MAAM,aACT,wBAAIA,MAAM,cAAcD,EAAKE,MAC7B,wBAAID,MAAM,iCAAiCD,EAAKG,OAChD,uBAAGF,MAAM,aAAaD,EAAKI,mBCiFxBC,E,kDA/Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,UAAU,EACVV,MAAO,IAET,EAAKW,aAAe,EAAKA,aAAaC,KAAlB,gBANH,E,yDASNC,GAAQ,IAAD,OAClBA,EAAMC,iBACO,IAAIC,SAASF,EAAMG,QAEhCC,MAAM,gCAAiC,CACrCC,KAAM,UACNC,OAAQ,QAGPC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAKC,SAAS,CACZd,UAAU,EACVV,MAAOuB,EAAKvB,WAMhB,SAACyB,GACC,EAAKD,SAAS,CACZd,UAAU,EACVe,e,+BAOR,OAEE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,UAAU,6BACb,kBAACC,EAAA,EAAD,KACE,4BAAQD,UAAU,cAChB,2CACA,yBAAKE,IAAKC,IAAMH,UAAU,WAAWI,IAAI,UAE3C,kBAACC,EAAA,EAAD,CAAML,UAAU,gBAAgBM,SAAUC,KAAKxB,cAE7C,kBAACsB,EAAA,EAAKG,MAAN,CAAYC,UAAU,YAAYT,UAAU,mBAC1C,kBAACK,EAAA,EAAKK,QAAN,CACEC,KAAK,OACLC,KAAK,OAGLC,YAAY,qBACZC,UAAQ,KAIZ,kBAACC,EAAA,EAAD,CAAQJ,KAAK,SAASpC,MAAM,gBAA5B,UAKN,kBAACwB,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,KACE,kBAAC,EAAD,CAAa7B,MAAOmC,KAAK1B,MAAMT,e,GAtEzB4C,IAAMC,WCHJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCRNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAW/C,MAGbgD,SAASC,eAAe,SDmHtC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,c","file":"static/js/main.a0bf44ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/operator.23ba0e19.png\";","// adapted from: https://pusher.com/tutorials/consume-restful-api-react\n\nimport React from 'react'\n\n\n\nconst JokeResults = ({ jokes }) => {\n  return (\n    <div>\n      <center><h1>Jokes</h1></center>\n      {jokes.map((joke) => (\n        <div class=\"card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">{joke.text}</h5>\n            <h6 class=\"card-subtitle mb-2 text-muted\">{joke.score}</h6>\n            <p class=\"card-text\">{joke.categories}</p>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n};\n\nexport default JokeResults","import React from 'react';\nimport logo from './operator.png';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './main.css';\nimport './App.css';\n\nimport Form from 'react-bootstrap/Form'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Container from 'react-bootstrap/Container'\nimport Button from 'react-bootstrap/Button'\n\nimport JokeResults from './components/JokeResults';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoaded: false,\n      jokes: []\n    }\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const data = new FormData(event.target);\n\n    fetch('http://0.0.0.0:5000/jokes/api', {\n      mode: 'no-cors',\n      method: 'GET',\n      // body: data,\n    })\n      .then(res => res.json())\n      .then(\n        (data) => {\n          this.setState({\n            isLoaded: true,\n            jokes: data.jokes\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  render() {\n    return (\n\n      <Container>\n        <Row className=\"justify-content-md-center\">\n          <Col>\n            <header className=\"App-header\">\n              <h1>HahaFactory</h1>\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            </header>\n            <Form className=\"global-search\" onSubmit={this.handleSubmit}>\n\n              <Form.Group controlId=\"Key Words\" className=\"formGroupCenter\">\n                <Form.Control\n                  type=\"text\"\n                  name=\"name\"\n                  // value={this.state.newRequest.contactinfo.name}\n                  // onChange={this.handleInput_contact}\n                  placeholder=\"Enter key words...\"\n                  required\n                />\n              </Form.Group>\n\n              <Button type=\"submit\" class=\"btn btn-info\">Go!</Button>\n            </Form>\n\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <JokeResults jokes={this.state.jokes} />\n          </Col>\n        </Row>\n      </Container >\n\n\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n// import LegacyApp from './LegacyApp';\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <Switch>\n      <Route path=\"/\" component={App} />\n      {/* <Route path=\"/sample\" component={ReactSample} /> */}\n    </Switch>\n  </BrowserRouter>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}