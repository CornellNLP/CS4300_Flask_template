{"version":3,"sources":["operator.png","AutoCompleteText.js","categories.js","components/JokeResults.jsx","App.jsx","serviceWorker.js","components/SampleFetch.jsx","index.js"],"names":["module","exports","AutoCompleteText","props","onTextChanged","e","items","value","target","suggestions","length","regex","RegExp","sort","filter","v","test","setState","text","state","this","map","item","onClick","suggestionSelected","className","onChange","type","renderSuggestions","React","Component","split","JokeResults","jokes","Fragment","joke","score","categories","App","isLoaded","handleSubmit","bind","event","preventDefault","FormData","fetch","method","then","res","json","data","error","Container","Row","Col","src","logo","alt","Form","onSubmit","Group","controlId","Control","name","placeholder","required","Label","key","Check","inline","label","id","as","Button","Boolean","window","location","hostname","match","ReactDOM","render","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,sC,qQCGtBC,G,0EACjB,WAAaC,GAAQ,IAAD,8BAChB,cAAMA,IAOVC,cAAgB,SAACC,GAAM,IACXC,EAAU,EAAKH,MAAfG,MACFC,EAAQF,EAAEG,OAAOD,MACnBE,EAAc,GAClB,GAAIF,EAAMG,OAAS,EAAG,CAClB,IAAMC,EAAQ,IAAIC,OAAJ,WAAeL,GAAS,KACtCE,EAAcH,EAAMO,OAAOC,QAAO,SAAAC,GAAC,OAAIJ,EAAMK,KAAKD,MAEtD,EAAKE,UAAS,iBAAO,CAACR,cAAaS,KAAMX,OAdzC,EAAKY,MAAQ,CACTV,YAAa,GACbS,KAAM,IAJM,E,+DAmBDX,GACfa,KAAKH,UAAS,iBAAO,CACjBC,KAAMX,EACNE,YAAa,S,0CAIC,IAAD,OACVA,EAAeW,KAAKD,MAApBV,YACP,OAA2B,IAAvBA,EAAYC,OACL,KAGP,4BACKD,EAAYY,KAAI,SAACC,GAAD,OAAU,wBAAIC,QAAS,kBAAM,EAAKC,mBAAmBF,KAAQA,S,+BAK/E,IACCJ,EAASE,KAAKD,MAAdD,KACR,OACI,yBAAKO,UAAU,oBACX,2BAAOlB,MAAOW,EAAMQ,SAAUN,KAAKhB,cAAeuB,KAAK,SACtDP,KAAKQ,yB,GA5CwBC,IAAMC,YCHrC,6fA+CNC,MAAM,M,uCCjBAC,EAxBK,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACrB,OAAoB,GAAhBA,EAAMvB,OAEN,kBAAC,IAAMwB,SAAP,MAMF,kBAAC,IAAMA,SAAP,KACE,gCAAQ,sCACPD,EAAMZ,KAAI,SAACc,GAAD,OACT,yBAAKV,UAAU,QACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAcU,EAAKjB,MACjC,wBAAIO,UAAU,iCAAiCU,EAAKC,OACpD,uBAAGX,UAAU,aAAaU,EAAKE,mBC0H5BC,E,kDA7Hb,WAAYnC,GAAQ,IAAD,8BACjB,cAAMA,IACDgB,MAAQ,CACXoB,UAAU,EACVN,MAAO,IAET,EAAKO,aAAe,EAAKA,aAAaC,KAAlB,gBANH,E,yDASNC,GAAQ,IAAD,OAClBA,EAAMC,iBACO,IAAIC,SAASF,EAAMlC,QAEhCqC,MAAM,gCAAiC,CACrCC,OAAQ,QAGPC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GAEC,EAAKjC,SAAS,CACZsB,UAAU,EACVN,MAAOiB,EAAKjB,WAOhB,SAACkB,GACC,EAAKlC,SAAS,CACZsB,UAAU,EACVY,e,+BAQR,OAEE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAK5B,UAAU,6BACb,kBAAC6B,EAAA,EAAD,KACE,4BAAQ7B,UAAU,cAChB,2CACA,yBAAK8B,IAAKC,IAAM/B,UAAU,WAAWgC,IAAI,UAE3C,kBAACC,EAAA,EAAD,CAAMjC,UAAU,gBAAgBkC,SAAUvC,KAAKoB,cAE7C,kBAACkB,EAAA,EAAKE,MAAN,CAAYC,UAAU,YAAYpC,UAAU,mBAC1C,kBAACiC,EAAA,EAAKI,QAAN,CACEnC,KAAK,OACLoC,KAAK,OAGLC,YAAY,qBACZC,UAAQ,KAaZ,kBAACP,EAAA,EAAKE,MAAN,CAAYC,UAAU,wBAAwBpC,UAAU,mBACtD,kBAACiC,EAAA,EAAKQ,MAAN,CAAYzC,UAAU,kBAAtB,aACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,CAAkBnB,MAAQ+B,QAOlC,kBAACqB,EAAA,EAAKE,MAAN,CAAYC,UAAU,YAAYpC,UAAU,mBAC1C,kBAACiC,EAAA,EAAKQ,MAAN,uBACC,CAAC,SAAS7C,KAAI,SAACM,GAAD,OACb,yBAAKwC,IAAG,iBAAYxC,GAAQF,UAAU,iBACpC,kBAACiC,EAAA,EAAKU,MAAN,CAAYC,QAAM,EAACC,MAAM,IAAI3C,KAAMA,EAAM4C,GAAE,iBAAY5C,EAAZ,QAC3C,kBAAC+B,EAAA,EAAKU,MAAN,CAAYC,QAAM,EAACC,MAAM,IAAI3C,KAAMA,EAAM4C,GAAE,iBAAY5C,EAAZ,QAC3C,kBAAC+B,EAAA,EAAKU,MAAN,CAAYC,QAAM,EAACC,MAAM,IAAI3C,KAAMA,EAAM4C,GAAE,iBAAY5C,EAAZ,QAC3C,kBAAC+B,EAAA,EAAKU,MAAN,CAAYC,QAAM,EAACC,MAAM,IAAI3C,KAAMA,EAAM4C,GAAE,iBAAY5C,EAAZ,QAC3C,kBAAC+B,EAAA,EAAKU,MAAN,CAAYC,QAAM,EAACC,MAAM,IAAI3C,KAAMA,EAAM4C,GAAE,iBAAY5C,EAAZ,aAKjD,kBAAC+B,EAAA,EAAKE,MAAN,CAAYC,UAAU,kBAAkBpC,UAAU,mBAEhD,kBAACiC,EAAA,EAAKI,QAAN,CAAcU,GAAG,UACf,4DACA,sCACA,yCACA,uCAIJ,kBAACC,EAAA,EAAD,CAAQ9C,KAAK,SAASF,UAAU,gBAAhC,UAKN,kBAAC4B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAK7B,UAAU,aACb,kBAAC,EAAD,CAAaQ,MAAOb,KAAKD,MAAMc,e,GApHzBJ,IAAMC,WCLJ4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBChBoBjD,IAAMC,UCQhCiD,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAW5C,MAGb6C,SAASC,eAAe,SFmHtC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLwC,QAAQxC,MAAMA,EAAMyC,c","file":"static/js/main.e09a2dcc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/operator.23ba0e19.png\";","import React from 'react';\r\nimport './AutoCompleteText.css';\r\n\r\nexport default class AutoCompleteText extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            suggestions: [],\r\n            text: '',\r\n        };\r\n    }\r\n\r\n    onTextChanged = (e)=> {\r\n        const { items } = this.props;\r\n        const value = e.target.value;\r\n        let suggestions = [];\r\n        if (value.length > 0) {\r\n            const regex = new RegExp(`^${value}`, 'i');\r\n            suggestions = items.sort().filter(v => regex.test(v));\r\n        }\r\n        this.setState(() => ({suggestions, text: value}));\r\n    }\r\n\r\n    suggestionSelected(value) {\r\n        this.setState(() => ({\r\n            text: value,\r\n            suggestions: [],\r\n        }))\r\n    }\r\n\r\n    renderSuggestions () {\r\n        const {suggestions} = this.state;\r\n        if (suggestions.length === 0) {\r\n            return null;\r\n        }\r\n        return (\r\n            <ul>\r\n                {suggestions.map((item) => <li onClick={() => this.suggestionSelected(item)}>{item}</li>)}\r\n            </ul>\r\n        );\r\n    }\r\n\r\n    render () {\r\n        const { text } = this.state;\r\n        return (\r\n            <div className=\"AutoCompleteText\">\r\n                <input value={text} onChange={this.onTextChanged} type=\"text\" />\r\n                {this.renderSuggestions()}\r\n            </div>\r\n        )\r\n    }\r\n}","export default `Animals\r\nAviation\r\nBar Jokes\r\nBiology\r\nBlind Jokes\r\nBlonde Jokes\r\nBusiness\r\nChemistry\r\nChildren\r\nComputers\r\nCrazy Jokes\r\nDad Jokes\r\nDeep Thoughts\r\nEnglish\r\nEthnic Jokes\r\nFamily, Parents\r\nFarmers\r\nFood Jokes\r\nHeaven and Hell\r\nHolidays\r\nIdiots\r\nInsults\r\nLawyers\r\nLight Bulbs\r\nLove & Romance\r\nMarriage\r\nMedical\r\nMen\r\nMilitary\r\nMoney\r\nMusic\r\nOffice Jokes\r\nOld Age\r\nOne Liners\r\nPhysics\r\nPick-up Line\r\nPolice Jokes\r\nPolitical\r\nPun\r\nRedneck\r\nReligious \r\nSchool\r\nScience\r\nSex\r\nSports\r\nState Jokes\r\nWomen\r\nYo Mama`.split('\\n');","// adapted from: https://pusher.com/tutorials/consume-restful-api-react\r\n\r\nimport React from 'react'\r\n\r\n\r\n\r\nconst JokeResults = ({ jokes }) => {\r\n  if (jokes.length == 0) {\r\n    return (\r\n      <React.Fragment>\r\n\r\n      </React.Fragment>\r\n    )\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <center><h2>Jokes</h2></center>\r\n      {jokes.map((joke) => (\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <h5 className=\"card-title\">{joke.text}</h5>\r\n            <h6 className=\"card-subtitle mb-2 text-muted\">{joke.score}</h6>\r\n            <p className=\"card-text\">{joke.categories}</p>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </React.Fragment>\r\n  )\r\n};\r\n\r\nexport default JokeResults","import React from 'react';\r\nimport logo from './operator.png';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport './main.css';\r\nimport './App.css';\r\nimport AutoCompleteText from './AutoCompleteText';\r\nimport categories from './categories';\r\n\r\nimport Form from 'react-bootstrap/Form'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport JokeResults from './components/JokeResults';\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      isLoaded: false,\r\n      jokes: []\r\n    }\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    const data = new FormData(event.target);\r\n\r\n    fetch('http://0.0.0.0:5000/jokes/api', {\r\n      method: 'GET',\r\n      // body: data,\r\n    })\r\n      .then(res => res.json())\r\n      .then(\r\n        (data) => {\r\n\r\n          this.setState({\r\n            isLoaded: true,\r\n            jokes: data.jokes\r\n          });\r\n\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      )\r\n    // .then(console.log(this.jokes))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n      <Container>\r\n        <Row className=\"justify-content-md-center\">\r\n          <Col>\r\n            <header className=\"App-header\">\r\n              <h1>HahaFactory</h1>\r\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            </header>\r\n            <Form className=\"global-search\" onSubmit={this.handleSubmit}>\r\n\r\n              <Form.Group controlId=\"Key Words\" className=\"formGroupCenter\">\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  // value={this.state.newRequest.contactinfo.name}\r\n                  // onChange={this.handleInput_contact}\r\n                  placeholder=\"Enter Key Words...\"\r\n                  required\r\n                />\r\n              </Form.Group>\r\n\r\n              {/* <Form.Group controlId=\"category\" className=\"formGroupCenter\">\r\n                <Form.Label>Category:</Form.Label>\r\n                <Form.Control as=\"select\">\r\n                  <option>Enter Category...</option>\r\n                  <option>1</option>\r\n                  <option>2</option>\r\n                </Form.Control>\r\n              </Form.Group> */}\r\n\r\n              <Form.Group controlId=\"category_autocomplete\" className=\"formGroupCenter\">\r\n                <Form.Label className=\"category_label\">Category:</Form.Label> \r\n                <div className=\"App\">\r\n                  <div className=\"App-Component\">\r\n                    <div className=\"App-Component\">\r\n                      <AutoCompleteText items ={categories}/>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Form.Group>\r\n\r\n\r\n              <Form.Group controlId=\"min_score\" className=\"formGroupCenter\">\r\n                <Form.Label>Minimum Score:</Form.Label>\r\n                {['radio'].map((type) => (\r\n                  <div key={`inline-${type}`} className=\"score_options\">\r\n                    <Form.Check inline label=\"1\" type={type} id={`inline-${type}-1`} />\r\n                    <Form.Check inline label=\"2\" type={type} id={`inline-${type}-2`} />\r\n                    <Form.Check inline label=\"3\" type={type} id={`inline-${type}-3`} />\r\n                    <Form.Check inline label=\"4\" type={type} id={`inline-${type}-4`} />\r\n                    <Form.Check inline label=\"5\" type={type} id={`inline-${type}-5`} />\r\n                  </div>\r\n                ))}\r\n              </Form.Group>\r\n              \r\n              <Form.Group controlId=\"maturity_rating\" className=\"formGroupCenter\">\r\n                {/* <Form.Label>Maturity Rating:</Form.Label> */}\r\n                <Form.Control as=\"select\">\r\n                  <option>Enter Maturity Rating...</option>\r\n                  <option>PG</option>\r\n                  <option>PG-13</option>\r\n                  <option>R</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n\r\n              <Button type=\"submit\" className=\"btn btn-info\">Go!</Button>\r\n            </Form>\r\n\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col className=\"jokes-col\">\r\n            <JokeResults jokes={this.state.jokes} />\r\n          </Col>\r\n        </Row>\r\n      </Container >\r\n\r\n\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nclass SampleFetch extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      items: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"http://0.0.0.0:5000/jokes/api\", {\r\n      method: 'GET'\r\n    })\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            items: result.jokes\r\n          });\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      )\r\n      .then(console.log(this.items))\r\n  }\r\n\r\n  render() {\r\n    const { error, isLoaded, items } = this.state;\r\n    if (error) {\r\n      return <div>Error: {error.message}</div>;\r\n    } else if (!isLoaded) {\r\n      return <div>Loading...</div>;\r\n    } else {\r\n      return (\r\n        <ul>\r\n          {items.map(item => (\r\n            <li key={item.score}>\r\n              {item.text} {item.maturity}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default SampleFetch","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport SampleFetch from './components/SampleFetch';\r\n\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <Switch>\r\n      <Route path=\"/\" component={App} />\r\n      {/* <Route path=\"/sample\" component={SampleFetch} /> */}\r\n    </Switch>\r\n  </BrowserRouter>, document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}