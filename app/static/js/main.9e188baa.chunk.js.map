{"version":3,"sources":["images/operator.png","images/scores.js","components/Form.js","components/JokeResults.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","split","JokeForm","props","handleChange","e","name","value","setState","state","isLoaded","cat_options","categories","search","score","clickSubmit","query","handleSubmit","bind","axios","method","url","then","response","data","catch","err","console","log","event","preventDefault","this","params","URLSearchParams","append","forEach","cat","toString","history","push","pathname","categoryList","map","key","text","scoreList","scores","Form","onSubmit","Input","placeholder","label","type","onChange","defaultValue","Dropdown","closeOnChange","multiple","selection","options","Button","class","React","Component","withRouter","JokeResults","jokes","length","Fragment","joke","index","className","Label","App","category","fetchResults","URLParams","window","location","category_param","getAll","score_param","get","search_param","prevProps","Container","Row","Col","src","logo","alt","Dimmer","active","inverted","Loader","nextProps","prevState","sort","Boolean","hostname","match","ReactDOM","render","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.9e188baa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/operator.23ba0e19.png\";","export default `1\r\n2\r\n3\r\n4\r\n5`.split('\\n');","import React from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n    withRouter\r\n} from 'react-router-dom'\r\n\r\nimport { Button, Form } from 'semantic-ui-react'\r\nimport scores from '../images/scores';\r\n\r\nclass JokeForm extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isLoaded: false,\r\n            cat_options: [],         \r\n\r\n            categories: this.props.categories, \r\n            search: this.props.search, \r\n            score: this.props.score, \r\n            \r\n            clickSubmit: false, \r\n            query: ''\r\n        }\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n            axios({\r\n                method: 'GET',\r\n                url: `http://localhost:5000/api/cat-options`\r\n            })\r\n\r\n            .then((response) => {\r\n                this.setState({\r\n                    cat_options: response.data.categories, \r\n                    isLoaded: true, \r\n                })\r\n            })\r\n            .catch(err =>\r\n                console.log(err)\r\n            );\r\n    }\r\n\r\n    handleChange = (e, { name, value }) => {\r\n        this.setState({ [name]: value })\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        const { search, categories, score } = this.state\r\n\r\n        const params = new URLSearchParams()\r\n        if (this.state.search != null) params.append(\"search\", search)\r\n\r\n        if (this.state.categories != []) {\r\n        categories.forEach(cat => {\r\n            params.append(\"category\", cat);\r\n        })\r\n        }\r\n\r\n        if (this.state.score != null) params.append(\"score\", score)\r\n\r\n        console.log(params.toString())\r\n        const url = '?'+params.toString()\r\n        this.props.history.push({\r\n            pathname: '/',\r\n            search: url\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const categoryList = this.state.cat_options.map((cat) =>\r\n            ({\r\n                key: cat,\r\n                text: cat,\r\n                value: cat\r\n            })\r\n        );\r\n\r\n        const scoreList = scores.map((score) =>\r\n            ({\r\n                key: score,\r\n                text: score,\r\n                value: score\r\n            })\r\n        );\r\n        return (\r\n                        <Form onSubmit={this.handleSubmit}>\r\n                            <Form.Input\r\n                                placeholder=\"Search\"\r\n                                name=\"search\"\r\n                                label=\"Keywords\"\r\n                                type=\"text\"\r\n                                onChange={this.handleChange}\r\n                                defaultValue={this.props.search} \r\n                            />\r\n\r\n                            <Form.Dropdown\r\n                                closeOnChange\r\n                                placeholder=\"Select Categories\"\r\n                                name=\"categories\"\r\n                                label=\"Categories\"\r\n                                multiple\r\n                                search\r\n                                selection\r\n                                options={categoryList}\r\n                                onChange={this.handleChange}\r\n                                defaultValue = {this.props.categories}\r\n                            />\r\n\r\n                            <Form.Dropdown\r\n                                placeholder=\"Select Minimum Score\"\r\n                                name=\"score\"\r\n                                label=\"Minimum Score\"\r\n                                selection\r\n                                options={scoreList}\r\n                                onChange={this.handleChange}\r\n                                defaultValue = {this.props.score}\r\n                            />\r\n\r\n                            <Button class=\"ui button\" type=\"submit\">Go</Button>\r\n                        </Form>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default withRouter(JokeForm);\r\n","// adapted from: https://pusher.com/tutorials/consume-restful-api-react\r\n\r\nimport React from 'react'\r\nimport { Icon, Label } from 'semantic-ui-react'\r\n\r\nconst JokeResults = ({ jokes }) => {\r\n  if (jokes.length == 0) {\r\n    return (\r\n      <React.Fragment>\r\n\r\n      </React.Fragment>\r\n    )\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <center><h2>Jokes</h2></center>\r\n      {jokes.map((joke, index) => (\r\n        (index <= 10) ?\r\n        <div>\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <h5 className=\"card-title\">{joke[0].text}</h5>\r\n            <h6 className=\"card-subtitle mb-2 text-muted\">{joke[0].score}</h6>\r\n              {joke[0].categories.map((cat) => <Label>\r\n                {cat}\r\n              </Label>)}\r\n          </div>\r\n        </div>\r\n        <br></br>\r\n        </div> : null\r\n      ))}\r\n    </React.Fragment>\r\n  )\r\n};\r\n\r\nexport default JokeResults","import React from 'react';\r\nimport axios from 'axios';\r\n\r\n// css files \r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './css/main.css';\r\nimport './css/App.css';\r\n\r\n// images, lists\r\nimport logo from './images/operator.png';\r\n\r\n// components\r\nimport Form from './components/Form'\r\nimport JokeResults from './components/JokeResults';\r\n\r\n// import { Button, Checkbox, Form } from 'semantic-ui-react'\r\nimport { Row, Col, Container } from 'react-bootstrap'\r\nimport { Dimmer, Loader} from 'semantic-ui-react'\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      isLoaded: false,\r\n      jokes: [],\r\n\r\n      category: [],\r\n      score: '',\r\n      search: ''    \r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchResults()\r\n  }\r\n\r\n  fetchResults(){ \r\n    const URLParams = new URLSearchParams(window.location.search)\r\n\r\n    const category_param = URLParams.getAll(\"category\")\r\n    const score_param = URLParams.get(\"score\")\r\n    const search_param = URLParams.get(\"search\")\r\n\r\n    axios({\r\n      method: 'GET',\r\n      url: `http://localhost:5000/api/search`,\r\n      params: URLParams\r\n    })\r\n      .then((response) => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          jokes: response.data.jokes,\r\n\r\n          category: category_param,\r\n          score: score_param,\r\n          search: search_param\r\n        })\r\n      })\r\n      .catch(err =>\r\n        console.log(err)\r\n      );\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    const URLParams = new URLSearchParams(nextProps.location.search)\r\n\r\n    const category_param = URLParams.getAll(\"category\")\r\n    const score_param = URLParams.get(\"score\")\r\n    const search_param = URLParams.get(\"search\")\r\n\r\n    const cat_bool = category_param.sort().toString() !== (prevState.category).sort().toString()\r\n    return cat_bool || score_param !== prevState.score || search_param !== prevState.search \r\n      ? { isLoaded: false }\r\n      : null\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.state.isLoaded === false) {\r\n      this.fetchResults();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.isLoaded) {return (\r\n      <Container>\r\n        <Row className=\"justify-content-md-center\">\r\n          <Col>\r\n            <header className=\"App-header\">\r\n              <h1>HahaFactory</h1>\r\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            </header>\r\n\r\n          <Form score = {this.state.score} categories = {this.state.category} search = {this.state.search} />\r\n\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col className=\"jokes-col\">\r\n             <JokeResults jokes={this.state.jokes}/>\r\n          </Col>\r\n        </Row>\r\n      </Container >\r\n      )\r\n   }\r\n   else return (\r\n      <Dimmer active inverted>\r\n        <Loader>Loading</Loader>\r\n      </Dimmer>\r\n      )\r\n   }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <Switch>\r\n      <Route path=\"/\" component={App} />  \r\n    </Switch>\r\n  </BrowserRouter>, document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}